from common.ethereum.transaction import EthTx
from common.neon.transaction_model import NeonTxModel

import unittest

from common.utils.format import hex_to_bytes


class TestNeonTx(unittest.TestCase):
    # https://etherscan.io/tx/0x14a298c1eea89f42285948b7d51eeac2876ca7406c9784b9b90dd3591d156d64
    raw_tx = (
        "0xF86B80850BA43B7400825208947917bc33eea648809c285607579c9919fb864f8f8703BAF82D03A0008025A00679406515307908617"
        "14b2e8fd8b080361d1ada048189000c07a66848afde46A069b041db7c29dbcc6becf42017ca7ac086b12bd53ec8ee494596f790fb6a0a"
        "69"
    )
    # https://etherscan.io/tx/0x5952e20acbee6be83e1c5d1846c371d4a492d01bd720e2e7db9550e410670e3f
    legacy_raw_tx = (
        "0xf8a90b8501394dc8d782dbf994a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4880b844095ea7b3000000000000000000000000000"
        "000000022d473030f116ddee9f6b43ac78ba3000000000000000000000000000000000000000000000000000000000a3140c025a044f4"
        "dc4ab0c400671ef9dba7e075d6859a67b0b0bca91a18b05d2b061a7492a2a01d380696a3d73aa4d275b14116a04e39c459577d1dcbcc5"
        "00a98ad1385c057fe"
    )
    # https://etherscan.io/tx/0x698787452047f9e2187f653a6e66fac0f8ea30d3c78bdeae80a7317c2a30fdd8
    eip1559_raw_tx = (
        "0x02f9043b01820536830f424085019924a33e8307849a943fc91a3afd70395cd496c647d5a6cc9d4b2b7fad88016345785d8a0000b90"
        "3c43593564c00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000"
        "0000000000000000000000000000a00000000000000000000000000000000000000000000000000000000066460dff000000000000000"
        "00000000000000000000000000000000000000000000000040b0806040000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000"
        "0000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000"
        "0000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000280000"
        "0000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000"
        "0000000000000002000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000"
        "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000020000000000"
        "00000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000012631146b8"
        "348e9fbd000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000"
        "0000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000008a0a9b663693a22235b896f70a229c4a225976"
        "2300000000000000000000000000000000000000000000000000000000000000600000000000000000000000008a0a9b663693a22235b"
        "896f70a229c4a22597623000000000000000000000000000000fee13a103a10d593b9ae06b3e05f2e7e1c000000000000000000000000"
        "0000000000000000000000000000000000000019000000000000000000000000000000000000000000000000000000000000006000000"
        "00000000000000000008a0a9b663693a22235b896f70a229c4a2259762300000000000000000000000000000000000000000000000000"
        "0000000000000100000000000000000000000000000000000000000000012574cc0c8628177a8bc080a00eeec2a7c8865c5e94ae462d5"
        "ab7e9492a93c6fe90fff0296d670b7dad640728a03c8e4366beefe66164e20db053f1d9b6891dbc66152111c8d639b26fddd05b31"
    )

    def setUp(self):
        self.maxDiff = None

    def test_neon_tx(self):
        neon_tx = EthTx.from_raw(self.raw_tx)
        self.assertEqual(neon_tx.nonce, 0)
        self.assertEqual(neon_tx.gas_price, 50000000000)
        self.assertEqual(neon_tx.gas_limit, 21000)
        self.assertEqual(neon_tx.value, 1050000000000000)
        self.assertEqual(neon_tx.chain_id, 1)
        self.assertEqual(neon_tx.to_address.hex(), "7917bc33eea648809c285607579c9919fb864f8f")
        self.assertEqual(neon_tx.s, 0x69B041DB7C29DBCC6BECF42017CA7AC086B12BD53EC8EE494596F790FB6A0A69)
        self.assertEqual(neon_tx.r, 0x067940651530790861714B2E8FD8B080361D1ADA048189000C07A66848AFDE46)
        self.assertEqual(neon_tx.v, 0x25)
        self.assertEqual(neon_tx.call_data, bytes())
        self.assertIsNone(neon_tx.contract)
        self.assertEqual(neon_tx.from_address.hex(), "8d900bfa2353548a4631be870f99939575551b60")
        self.assertEqual(neon_tx.neon_tx_hash.hex(), "14a298c1eea89f42285948b7d51eeac2876ca7406c9784b9b90dd3591d156d64")

    def test_neon_tx_model(self):
        neon_tx_info = NeonTxModel.from_raw(self.raw_tx)
        self.assertEqual(neon_tx_info.nonce, 0)
        self.assertEqual(neon_tx_info.gas_price, 50000000000)
        self.assertEqual(neon_tx_info.gas_limit, 21000)
        self.assertEqual(neon_tx_info.value, 1050000000000000)
        self.assertEqual(neon_tx_info.chain_id, 1)
        self.assertEqual(neon_tx_info.to_address.to_string(), "0x7917bc33eea648809c285607579c9919fb864f8f")
        self.assertTrue(neon_tx_info.has_chain_id)
        self.assertEqual(neon_tx_info.r, 0x067940651530790861714B2E8FD8B080361D1ADA048189000C07A66848AFDE46)
        self.assertEqual(neon_tx_info.s, 0x69B041DB7C29DBCC6BECF42017CA7AC086B12BD53EC8EE494596F790FB6A0A69)
        self.assertEqual(neon_tx_info.v, 0x25)
        self.assertTrue(neon_tx_info.call_data.is_empty)
        self.assertTrue(neon_tx_info.contract.is_empty)
        self.assertEqual(neon_tx_info.from_address.to_string(), "0x8d900bfa2353548a4631be870f99939575551b60")
        self.assertEqual(
            neon_tx_info.neon_tx_hash.to_string(), "0x14a298c1eea89f42285948b7d51eeac2876ca7406c9784b9b90dd3591d156d64"
        )
        self.assertIsNone(neon_tx_info.error)
        self.assertTrue(neon_tx_info.is_valid)

        neon_tx_json = {
            "tx_type": "0x0",
            "nonce": "0x0",
            "gas_price": "0xba43b7400",
            "gas_limit": "0x5208",
            "value": "0x3baf82d03a000",
            "chain_id": "0x1",
            "to_address": "0x7917bC33EeA648809c285607579c9919FB864F8F",
            "neon_tx_hash": "0x14a298c1eea89f42285948b7d51eeac2876ca7406c9784b9b90dd3591d156d64",
            "r": "0x67940651530790861714b2e8fd8b080361d1ada048189000c07a66848afde46",
            "s": "0x69b041db7c29dbcc6becf42017ca7ac086b12bd53ec8ee494596f790fb6a0a69",
            "v": "0x25",
            "call_data": "0x",
            "contract": None,
            "from_address": "0x8d900bfA2353548a4631bE870f99939575551B60",
            "error": None,
        }
        for key, value in neon_tx_info.to_dict().items():
            if value is None:
                self.assertIsNone(neon_tx_json[key], key)
            else:
                self.assertEqual(value, neon_tx_json[key], key)

        neon_tx_str = (
            "NeonTxModel("
            "tx_type=0, "
            "chain_id=1, "
            "neon_tx_hash=0x14a298c1eea89f42285948b7d51eeac2876ca7406c9784b9b90dd3591d156d64, "
            "from_address=0x8d900bfA2353548a4631bE870f99939575551B60, "
            "to_address=0x7917bC33EeA648809c285607579c9919FB864F8F, "
            "contract=None, "
            "nonce=0, "
            "gas_price=50000000000, "
            "gas_limit=21000, "
            "value=1050000000000000, "
            "call_data=0x, "
            "v=37, "
            "r=2928110023290089484253548116616605334358013891920862960710110507440823852614, "
            "s=47804268715460771705062403734867221257027780543816644424145154262186536340073)"
        )
        self.assertEqual(neon_tx_info.to_string(), neon_tx_str)

    def test_legacy_neon_tx(self):
        neon_tx = EthTx.from_raw(self.legacy_raw_tx)
        self.assertEqual(neon_tx.nonce, 11)
        self.assertEqual(neon_tx.gas_price, 5256366295)
        self.assertEqual(neon_tx.gas_limit, 56313)
        self.assertEqual(neon_tx.value, 0)
        self.assertEqual(neon_tx.chain_id, 1)

        self.assertEqual(neon_tx.s, 0x1D380696A3D73AA4D275B14116A04E39C459577D1DCBCC500A98AD1385C057FE)
        self.assertEqual(neon_tx.r, 0x44F4DC4AB0C400671EF9DBA7E075D6859A67B0B0BCA91A18B05D2B061A7492A2)
        self.assertEqual(neon_tx.v, 0x25)
        self.assertEqual(
            neon_tx.call_data,
            hex_to_bytes(
                "0x095ea7b3000000000000000000000000000000000022d473030f116ddee9f6b43ac78ba30"
                "00000000000000000000000000000000000000000000000000000000a3140c0"
            ),
        )
        self.assertIsNone(neon_tx.contract)
        self.assertEqual(neon_tx.to_address.hex(), "a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48".lower())
        self.assertEqual(neon_tx.from_address.hex(), "30362EDDe74BcE6e7011b1ED13b8EdD08F511f25".lower())
        self.assertEqual(neon_tx.neon_tx_hash.hex(), "5952e20acbee6be83e1c5d1846c371d4a492d01bd720e2e7db9550e410670e3f")

    def test_eip1559_neon_tx(self):
        neon_tx = EthTx.from_raw(self.eip1559_raw_tx)
        self.assertEqual(neon_tx.nonce, 1334)
        self.assertEqual(neon_tx.max_fee_per_gas, 6864282430)
        self.assertEqual(neon_tx.gas_limit, 492698)
        self.assertEqual(neon_tx.value, 100000000000000000)
        self.assertEqual(neon_tx.chain_id, 1)

        self.assertEqual(neon_tx.s, 0x3C8E4366BEEFE66164E20DB053F1D9B6891DBC66152111C8D639B26FDDD05B31)
        self.assertEqual(neon_tx.r, 0x0EEEC2A7C8865C5E94AE462D5AB7E9492A93C6FE90FFF0296D670B7DAD640728)
        self.assertEqual(neon_tx.v, 0x0)
        self.assertEqual(
            neon_tx.call_data,
            hex_to_bytes(
                "0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000"
                "000000000000000000000000000000000000000000000000000a000000000000000000000000000000000"
                "00000000000000000000000066460dff00000000000000000000000000000000000000000000000000000"
                "000000000040b080604000000000000000000000000000000000000000000000000000000000000000000"
                "0000000000000000000000000000000000000000000000000000040000000000000000000000000000000"
                "0000000000000000000000000000000800000000000000000000000000000000000000000000000000000"
                "0000000000e00000000000000000000000000000000000000000000000000000000000000200000000000"
                "0000000000000000000000000000000000000000000000000000280000000000000000000000000000000"
                "0000000000000000000000000000000040000000000000000000000000000000000000000000000000000"
                "0000000000002000000000000000000000000000000000000000000000000016345785d8a000000000000"
                "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000"
                "0000000000000000000000000000000000200000000000000000000000000000000000000000000000001"
                "6345785d8a000000000000000000000000000000000000000000000000012631146b8348e9fbd00000000"
                "0000000000000000000000000000000000000000000000000000000a00000000000000000000000000000"
                "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                "000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000"
                "0000000000000000008a0a9b663693a22235b896f70a229c4a22597623000000000000000000000000000"
                "00000000000000000000000000000000000600000000000000000000000008a0a9b663693a22235b896f7"
                "0a229c4a22597623000000000000000000000000000000fee13a103a10d593b9ae06b3e05f2e7e1c00000"
                "0000000000000000000000000000000000000000000000000000000001900000000000000000000000000"
                "000000000000000000000000000000000000600000000000000000000000008a0a9b663693a22235b896f"
                "70a229c4a2259762300000000000000000000000000000000000000000000000000000000000000010000"
                "0000000000000000000000000000000000000000012574cc0c8628177a8b"
            ),
        )
        self.assertIsNone(neon_tx.contract)
        self.assertEqual(neon_tx.to_address.hex(), "3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD".lower())
        self.assertEqual(neon_tx.from_address.hex(), "8d99C04eDe67EF5c2936215f95Af1A11045EA298".lower())
        self.assertEqual(neon_tx.neon_tx_hash.hex(), "698787452047f9e2187f653a6e66fac0f8ea30d3c78bdeae80a7317c2a30fdd8")

    def test_eip1559_neon_tx_model(self):
        call_data = (
            "0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000"
            "000000000000000000000000000000000000000000000000000a000000000000000000000000000000000"
            "00000000000000000000000066460dff00000000000000000000000000000000000000000000000000000"
            "000000000040b080604000000000000000000000000000000000000000000000000000000000000000000"
            "0000000000000000000000000000000000000000000000000000040000000000000000000000000000000"
            "0000000000000000000000000000000800000000000000000000000000000000000000000000000000000"
            "0000000000e00000000000000000000000000000000000000000000000000000000000000200000000000"
            "0000000000000000000000000000000000000000000000000000280000000000000000000000000000000"
            "0000000000000000000000000000000040000000000000000000000000000000000000000000000000000"
            "0000000000002000000000000000000000000000000000000000000000000016345785d8a000000000000"
            "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000"
            "0000000000000000000000000000000000200000000000000000000000000000000000000000000000001"
            "6345785d8a000000000000000000000000000000000000000000000000012631146b8348e9fbd00000000"
            "0000000000000000000000000000000000000000000000000000000a00000000000000000000000000000"
            "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
            "000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000"
            "0000000000000000008a0a9b663693a22235b896f70a229c4a22597623000000000000000000000000000"
            "00000000000000000000000000000000000600000000000000000000000008a0a9b663693a22235b896f7"
            "0a229c4a22597623000000000000000000000000000000fee13a103a10d593b9ae06b3e05f2e7e1c00000"
            "0000000000000000000000000000000000000000000000000000000001900000000000000000000000000"
            "000000000000000000000000000000000000600000000000000000000000008a0a9b663693a22235b896f"
            "70a229c4a2259762300000000000000000000000000000000000000000000000000000000000000010000"
            "0000000000000000000000000000000000000000012574cc0c8628177a8b"
        )

        neon_tx_info = NeonTxModel.from_raw(self.eip1559_raw_tx)

        self.assertEqual(neon_tx_info.nonce, 1334)
        self.assertEqual(neon_tx_info.max_fee_per_gas, 6864282430)
        self.assertEqual(neon_tx_info.gas_limit, 492698)
        self.assertEqual(neon_tx_info.value, 100000000000000000)
        self.assertEqual(neon_tx_info.chain_id, 1)
        self.assertEqual(neon_tx_info.to_address.to_string(), "0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD".lower())
        self.assertTrue(neon_tx_info.has_chain_id)

        self.assertEqual(neon_tx_info.s, 0x3C8E4366BEEFE66164E20DB053F1D9B6891DBC66152111C8D639B26FDDD05B31)
        self.assertEqual(neon_tx_info.r, 0x0EEEC2A7C8865C5E94AE462D5AB7E9492A93C6FE90FFF0296D670B7DAD640728)
        self.assertEqual(neon_tx_info.v, 0x0)
        self.assertEqual(neon_tx_info.call_data, hex_to_bytes(call_data))
        self.assertTrue(neon_tx_info.contract.is_empty)

        self.assertEqual(neon_tx_info.from_address.to_string(), "0x8d99C04eDe67EF5c2936215f95Af1A11045EA298".lower())
        self.assertEqual(
            neon_tx_info.neon_tx_hash.to_string(), "0x698787452047f9e2187f653a6e66fac0f8ea30d3c78bdeae80a7317c2a30fdd8"
        )
        self.assertIsNone(neon_tx_info.error)
        self.assertTrue(neon_tx_info.is_valid)

        neon_tx_json = {
            "tx_type": "0x2",
            "nonce": "0x536",
            "gas_price": None,
            "max_priority_fee_per_gas": "0xf4240",
            "max_fee_per_gas": "0x19924a33e",
            "gas_limit": "0x7849a",
            "value": "0x16345785d8a0000",
            "chain_id": "0x1",
            "to_address": "0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",
            "neon_tx_hash": "0x698787452047f9e2187f653a6e66fac0f8ea30d3c78bdeae80a7317c2a30fdd8",
            "r": "0xeeec2a7c8865c5e94ae462d5ab7e9492a93c6fe90fff0296d670b7dad640728",
            "s": "0x3c8e4366beefe66164e20db053f1d9b6891dbc66152111c8d639b26fddd05b31",
            "v": "0x0",
            "call_data": call_data,
            "contract": None,
            "from_address": "0x8d99C04eDe67EF5c2936215f95Af1A11045EA298",
            "error": None,
        }
        for key, value in neon_tx_info.to_dict().items():
            if value is None:
                self.assertIsNone(neon_tx_json[key], key)
            else:
                self.assertEqual(value, neon_tx_json[key], key)

        neon_tx_str = (
            "NeonTxModel("
            "tx_type=2, "
            "chain_id=1, "
            "neon_tx_hash=0x698787452047f9e2187f653a6e66fac0f8ea30d3c78bdeae80a7317c2a30fdd8, "
            "from_address=0x8d99C04eDe67EF5c2936215f95Af1A11045EA298, "
            "to_address=0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD, "
            "contract=None, "
            "nonce=1334, "
            "max_priority_fee_per_gas=1000000, "
            "max_fee_per_gas=6864282430, "
            "gas_limit=492698, "
            "value=100000000000000000, "
            f"call_data={call_data}, "
            "v=0, "
            "r=6754232943803086859573945381489541043538645080117524293567261896370670536488, "
            "s=27390128385222333415767794961570757421005708102856399244378685593600677403441)"
        )
        self.assertEqual(neon_tx_info.to_string(), neon_tx_str)


if __name__ == "__main__":
    unittest.main()
